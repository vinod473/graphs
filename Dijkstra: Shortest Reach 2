//https://www.hackerrank.com/challenges/dijkstrashortreach/problem//

#include<iostream>
#include<vector>
#include<cstring>
#include<queue>
const int INF = 1e9;
using namespace std;

vector<pair<int,int>> adj[3000];
bool visited[3000];
int main()
{
    int t;
    cin >> t;
    while(t--)
    {
        int n,s,u,v,i,x,y;
        int m,d,w,z;
        cin >> n >> m;
        int dist[n];
        fill(dist,dist+n,INF);
        fill(visited,visited+n,false);
        for( i=0; i<m; i++ )
        {
            cin >> x >> y >> z;
            x--;
            y--;
            adj[x].push_back({y,z});
            adj[y].push_back({x,z});
        }
        cin >> s;
        s--;
        dist[s] = 0;
        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>> q;
        q.push({0,s});
        while(!q.empty())
        {
            v = q.top().second; 
            d = q.top().first;
            q.pop();
            if( visited[v] )
                continue;
            visited[v] = true;
            for( auto it: adj[v] )
            {
                u = it.first;
                w = it.second;
                if( dist[u] > dist[v] + w)
                {
                    dist[u] = dist[v] +w;
                    q.push({dist[u],u});
                }
            }
        }
        for( i=0;i<n;i++ )
        {
            if(i==s)
                continue;
            cout<< ((dist[i]==INF)?-1:dist[i]) << " ";
        }
        cout<<endl;
        for(i=0;i<n;i++)
        {
            adj[i].clear();
        }
    }
return 0;
}
