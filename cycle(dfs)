/*   https://www.geeksforgeeks.org/detect-cycle-undirected-graph/  */

import java.util.*;
import java.lang.*;
import java.io.*;

class Graph{
    private int V;
    private LinkedList<Integer> adj[];
    Graph(int v){
        V = v;
        adj = new LinkedList[v];
        for(int i=0;i<v;i++)
            adj[i] = new LinkedList();
    }
    void addEdge(int a,int b){
        adj[a].add(b);
        adj[b].add(a);
    }
    Boolean isCyclicUtil(Boolean visited[],int v,int parent){
        visited[v] = true;
        Iterator<Integer> it  = adj[v].iterator();
        while( it.hasNext() ){
            int x = it.next();
            if( !visited[x] ){
                if( isCyclicUtil(visited,x,v) )
                    return true;
            }
            else if( parent!=x )
                return true;
        }
        return false;
    }
    Boolean IsCyclic(){
        Boolean visited[] = new Boolean[V];
        for(int i=0;i<V;i++)
            visited[i] = false;
        for(int i=0;i<V;i++)
            if(!visited[i])
                if( isCyclicUtil(visited,i,-1) )
                    return true;
        return false;
    }
    public static void main(String args[]){
        Graph g1 = new Graph(5);
        g1.addEdge(1,0);
        g1.addEdge(0,2);
        g1.addEdge(0,3);
        g1.addEdge(2,3);
        g1.addEdge(3,4);

        if( g1.IsCyclic() )
            System.out.println("Cycle found");
        else
            System.out.println("Cycle not found");
    }
}
